<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="POS">
    <property environment="env"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="POS.classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/hsqldb.jar"/>
        <pathelement location="lib/log4j-core-2.0.2.jar"/>
        <pathelement location="lib/hibernate/hibernate-ehcache-4.1.7.Final.jar"/>
        <pathelement location="lib/hibernate/jboss-logging-3.1.0.GA.jar"/>
        <pathelement location="lib/hibernate/javassist-3.15.0-GA.jar"/>
        <pathelement location="lib/hibernate/slf4j-api-1.6.1.jar"/>
        <pathelement location="lib/hibernate/hibernate-jpa-2.0-api-1.0.1.Final.jar"/>
        <pathelement location="lib/hibernate/hibernate-commons-annotations-4.0.1.Final.jar"/>
        <pathelement location="lib/hibernate/hibernate-core-4.1.7.Final.jar"/>
        <pathelement location="lib/hibernate/jboss-transaction-api_1.1_spec-1.0.0.Final.jar"/>
        <pathelement location="lib/hibernate/ehcache-core-2.4.3.jar"/>
        <pathelement location="lib/hibernate/dom4j-1.6.1.jar"/>
        <pathelement location="lib/hibernate/antlr-2.7.7.jar"/>
        <pathelement location="lib/jgoodies-looks-2.5.2.jar"/>
        <pathelement location="lib/jgoodies-common-1.4.0.jar"/>
        <pathelement location="lib/log4j-api-2.0.2.jar"/>
        <pathelement location="lib/commons-logging-1.1.1.jar"/>
        <pathelement location="lib/xml-apis.jar"/>
        <pathelement location="lib/xercesImpl.jar"/>  
        <pathelement location="."/>
    </path>
    <property name="lib.dir" value="${basedir}/lib"/>

    <!-- database variables -->
    <property name="data.dir"   value="${basedir}/data"/>
    <property name="db.file"    value="${data.dir}/POSdb"/>
    <property name="db.alias"   value="POS"/>
    <property name="db.url"     value="jdbc:hsqldb:hsql://localhost/POS"/>
    <property name="lib.hibernate.dir"   value="${lib.dir}/hibernate"/>
              	
              	
    <property name="build.test.dir"       value="${build.dir}/test"/>
    <property name="build.dir"            value="${basedir}/build"/>
    <property name="test.dir"   value="${basedir}/test"/>

    <target name="dbmanager" description="Start the HSQLDB manager">
        <java
            classname="org.hsqldb.util.DatabaseManagerSwing"
            classpathref="POS.classpath"
            fork="yes"
        >
            <arg line="--user sa --url ${db.url}" />
        </java>
    </target>
    
    <target name="startdb" description="Start the HSQLDB with the default params">
        <java
            classname="org.hsqldb.Server"
            classpathref="POS.classpath"
            fork="yes"
        >
            <arg line="-database.0 '${db.file}' -dbname.0 '${db.alias}'" /> 
        </java>
    </target>

    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
   	</target>
   	<target name="bump-revision">
    	<propertyfile file="version.properties">
    		<entry key="build.revision.number" default="0" type="int" operation="+" value="1"/>
    	</propertyfile>
    	
    	<property file="version.properties" relative="true"/>
    	<propertyfile file="version.properties">
    		<entry key="build.number" operation="=" value="${build.major.number}.${build.minor.number}.${build.revision.number}" />
    	</propertyfile>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
	<target name="run" depends="build">
		<java classname="ee.ut.math.tvt.qrpth.Intro" fork="true">
			<classpath refid="POS.classpath"/>
		</java>
	</target>
	<target name="run-debug" depends="build">
		<java classname="ee.ut.math.tvt.qrpth.Intro" fork="true">
            <classpath refid="POS.classpath"/>
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" />
		</java>
	</target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
            <src path="src"/>
            <classpath refid="POS.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
	<target name="dist" depends="build,bump-revision">
		<mkdir dir="build/jar"/>
		<jar destfile="build/jar/qrpth.jar">
			<fileset dir="bin" />
			
			<fileset dir=".">
				<exclude name="**"/>
			</fileset>
			
			<fileset dir=".">
				<include name="version.properties"/>
				<include name="application.properties"/>
                                <include name="log4j2.xml"/>
                                <include name="image/**"/>
			</fileset>

		     <archives>
		       <zips>
		         <fileset dir="lib" includes="**/*.jar"/>
		       </zips>
		     </archives>
			
			<manifest>
				<attribute name="Main-Class" value="ee.ut.math.tvt.qrpth.Intro"/>
			</manifest>
		</jar>
	</target>
	<target name="jrun" depends="dist">
		<java jar="build/jar/qrpth.jar" fork="true"/>
	</target>
	<target name="runc" depends="build" description="Run the application (console)">
	<java classname="ee.ut.math.tvt.qrpth.Intro" classpathref="POS.classpath" fork="yes">
		<arg value="console" />
		<jvmarg value="-Xdebug" />
		<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" />
	</java>
</target>

<!-- GitHub macro, http://tlrobinson.net/blog/2008/11/ant-tasks-for-git/ -->
<macrodef name = "git">
     <attribute name = "command" />
     <attribute name = "dir" default = "" />
     <element name = "args" optional = "true" />
     <sequential>
         <echo message = "git @{command}" />
         <exec executable = "git" dir = "@{dir}">
             <arg value = "@{command}" />
             <args/>
         </exec>
     </sequential>
</macrodef>

<!-- GitHub, commit and push -->
<target name="git_commit" description="Commits and pushes changes to HitHub">
    <input message="Commit message" addproperty="commit-message" />		
		<echo message="Commiting all changes with message ${commit-message}" />
		
		<git command="add">
			<args>
					<arg value="-A" />
			</args>
		</git>
	 	
		<git command="commit">
			<args>
				<arg value="-am ${commit-message}" />
			</args>
		</git>
		
		<input message="username" addproperty="github_username" />
		<input message="password" addproperty="github_password" />
			
		<git command="push" >
			<args>
				<arg value="https://${github_username}:${github_password}@github.com/LiisR/Qrpth.git"/>
			</args>
		</git>
</target>

<!-- GitHub tag -->
<target name="git_tag" description="Creates GitHub tag">
	<input message="Tag name" addproperty="tag-name" />
	<input message="Tag comment" addproperty="tag-comment" />
	<input message="username" addproperty="github_username" />
	<input message="password" addproperty="github_password" />
			
	<echo message="Adding tag '${tag-name}'" />
			
	<git command="tag">
		<args>
			<arg value="-a" />
			<arg value="${tag-name}" />
			<arg value="-m ${tag-comment}" />
		</args>
	</git>
			
	<git command="push" >
		<args>
			<arg value="--tags" />
			<arg value="https://${github_username}:${github_password}@github.com/LiisR/Qrpth.git"/>
		</args>
	</git>
</target>
              	
<target name="build-tests" depends="build" description="Build the system">
	<mkdir dir="${build.dir}"/>
	<mkdir dir="${build.test.dir}"/>
         		<javac
                        srcdir="${test.dir}"
                        destdir="${build.test.dir}"
                        debug="true"
                        debuglevel="lines,vars,source"
                        encoding="utf-8"
                        compiler="modern"
                        target="1.5"
                        source="1.5"
         				includeantruntime="true"
                    	classpathref="libs"
                    >
            			<classpath>
            				<pathelement path="${build.classes.dir}" />
            			</classpath>
            		</javac>
</target>

 <path id="libs">
            		<fileset dir="${lib.dir}">
            			<include name="*.jar"/>
            		</fileset>
</path>
<path id="test-classpath">
            		<fileset dir="${lib.dir}">
            			<include name="*.jar"/>
            		</fileset>
            	    <pathelement path="${build.classes.dir}/" />
            		<pathelement path="${build.test.dir}/" />
</path>
              	
 <target name="test" depends="build-tests" description="Run the template application">

            		<junit>
            			<classpath refid="test-classpath" />

            			<formatter type="brief" usefile="false" />
            			<batchtest>
            				<fileset dir="${build.test.dir}" includes="**/*.class" />
            			</batchtest>
            		</junit>


</target>
	
</project>
